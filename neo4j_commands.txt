#### If you use the dump file

bin/neo4j-admin load --from=/Users/dgg32/Downloads/hetionet-raw --force

#### This is how you dump a backup

neo4j-admin dump --to=/mnt/hetionet --database=neo4j




#### For de novo import

CREATE CONSTRAINT ON ( anatomy:Anatomy ) ASSERT anatomy.name IS UNIQUE;
CREATE CONSTRAINT ON ( biologicalprocess:`Biological Process` ) ASSERT biologicalprocess.name IS UNIQUE;
CREATE CONSTRAINT ON ( cellularcomponent:`Cellular Component` ) ASSERT cellularcomponent.name IS UNIQUE;
CREATE CONSTRAINT ON ( compound:Compound ) ASSERT compound.name IS UNIQUE;
CREATE CONSTRAINT ON ( disease:Disease ) ASSERT disease.name IS UNIQUE;
CREATE CONSTRAINT ON ( gene:Gene ) ASSERT gene.name IS UNIQUE;
CREATE CONSTRAINT ON ( molecularfunction:`Molecular Function` ) ASSERT molecularfunction.name IS UNIQUE;
CREATE CONSTRAINT ON ( pathway:Pathway ) ASSERT pathway.name IS UNIQUE;
CREATE CONSTRAINT ON ( pharmacologicclass:`Pharmacologic Class` ) ASSERT pharmacologicclass.name IS UNIQUE;
CREATE CONSTRAINT ON ( sideeffect:`Side Effect` ) ASSERT sideeffect.name IS UNIQUE;
CREATE CONSTRAINT ON ( symptom:Symptom ) ASSERT symptom.name IS UNIQUE;
CREATE CONSTRAINT ON ( pathogen:Pathogen ) ASSERT pathogen.name IS UNIQUE;


CREATE CONSTRAINT ON ( p:Patient ) ASSERT p.patient_id IS UNIQUE;
CREATE CONSTRAINT ON ( ps:PatientUnitStay ) ASSERT ps.psid IS UNIQUE;
CREATE CONSTRAINT ON ( d:Diagnosis ) ASSERT d.diagnosisid IS UNIQUE;

python import_node.py /Users/dgg32/Documents/transfer_kg/data/hetionet_kegg_corrected_gene_name_nodes.json [ip] [password]
python import_supplement_node.py /Users/dgg32/Documents/transfer_kg/data/disease.csv [ip] [password] Disease
python import_supplement_node.py /Users/dgg32/Documents/transfer_kg/data/pathogen_tmp.csv [ip] [password] Pathogen
python import_supplement_node.py /Users/dgg32/Documents/transfer_kg/data/drug.csv [ip] [password] Compound
python import_supplement_node.py /Users/dgg32/Documents/transfer_kg/data/gene_tmp.csv [ip] [password] Gene
python import_supplement_node.py /Users/dgg32/Documents/transfer_kg/data/string_to_add_nodes.csv [ip] [password] Gene

python import_edges.py /Users/dgg32/Documents/transfer_kg/data/hetionet_kegg_corrected_gene_name_edges.json [ip] [password]
python import_supplement_edge.py /Users/dgg32/Documents/transfer_kg/data/drug_disease.csv [ip] [password] Compound Disease treats
python import_supplement_edge.py /Users/dgg32/Documents/transfer_kg/data/pathogen_disease.csv [ip] [password] Pathogen Disease causes
python import_supplement_edge.py /Users/dgg32/Documents/transfer_kg/data/gene_disease.csv [ip] [password] Gene Disease associates
python import_edges.py /Users/dgg32/Documents/transfer_kg/data/string_to_add_edges.json [ip] [password]


#Move the patient data into the import folder of your Neo4j project

LOAD CSV WITH HEADERS FROM 'file:///patient.csv' AS row MERGE (p:Patient {patient_id: row.patient_id, name: row.name, gender: row.gender});
LOAD CSV WITH HEADERS FROM 'file:///patientunitstay.csv' AS row MERGE (p:PatientUnitStay {psid: row.psid, hospitaldischargeyear: row.hospitaldischargeyear});
LOAD CSV WITH HEADERS FROM 'file:///diagnosis.csv' AS row MERGE (p:Diagnosis {diagnosisid: row.diagnosisid, diseasename: row.diseasename});

LOAD CSV WITH HEADERS FROM 'file:///patient_patientunitstay.csv' AS row MERGE (p:Patient {patient_id: row.from}) MERGE (ps:PatientUnitStay {psid: row.to}) MERGE (p)-[r:HAS_STAY]->(ps);
LOAD CSV WITH HEADERS FROM 'file:///patientunitstay_disease.csv' AS row MERGE (ps:PatientUnitStay {psid: row.from}) MERGE (d:Diagnosis {diagnosisid: row.to}) MERGE (ps)-[r:HAS_DIAG]->(d);
LOAD CSV WITH HEADERS FROM 'file:///diagnosis_disease.csv' AS row MERGE (d:Diagnosis {diagnosisid: row.from}) MERGE (ds:Disease {name: row.to}) MERGE (d)-[r:IS_DISEASE]->(ds);

LOAD CSV WITH HEADERS FROM 'file:///mutated_gene.csv' AS row MERGE (p:Patient {patient_id: row.from}) MERGE (g:Gene {name: row.to}) MERGE (p)-[r:HAS_MUTATION]->(g);
